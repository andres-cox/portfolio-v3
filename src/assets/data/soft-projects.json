[
    {
        "subheadline": "Frontend Project",
        "headline": "Movies PWA",
        "description": "It's a website where you find movie recommentations its details and nominations",
        "image": "assets/images/moviesPwa.png",
        "technologies": [
            "Ionic",
            "TMDb API",
            "Wikipedia API",
            "JustWatch API"
        ],
        "github": "https://github.com/andres-cox/movies-pwa",
        "website": "https://movies-pwa-6585e.firebaseapp.com/",
        "details": {
            "title": "Discover Movies Details",
            "summary": "I made this app for my self, I wanted to have all movies data in my hand and get its information as easy as posible. I always had to look for movies by my self, looking in webpages and youtube videos. But those often weren't good enough for me. So I created this app in order to find movies easely. Looking for movies by actor and check if they have awards and nominations. I also wanted to check if they were available in streaming platforms for that I use Justwatch API but unfortunatly we can use it only in local do to its CORS policy.",
            "images": [
                "assets/movies-app/home-dark.png",
                "assets/movies-app/movie-details.png",
                "assets/movies-app/movie-details-2.png",
                "assets/movies-app/search.png"
            ],
            "cards": [
                {
                    "subtitle": "Tabs Design",
                    "text": "I only wanted to have three tabs. Home tab is the welcome page in which we have the search bar, popular movies, tvshows and recomendations, these last one appear once we checked our favorite ones and it's based in TMDB api system. Discovery tab would be a place to find the most popular movies by year and genre. And the last tab for our personal list for movies. The ones we have seen, favorites and to watch.",
                    "image": "assets/movies-app/tabs.jpeg"
                },
                {
                    "subtitle": "The Movie Database API",
                    "text": "This API is very popular it's used in many other sides, so I wanted to try it as well. When I checked its documentation I saw that it was very organized and it had most of the functionality I was looking for, movie details, recomendations, actor's movies. </br></br> Then I realized that it hasn't have actor's tvshows as a basic query so I had to implement a search query, but it has its disadvantage, because the response isn't quite clean and I had to create some filters in order to have the result I was expecting. </br></br> I finished all the app based in just this API, then I wanted to move forward to implement nominations details and streaming availability.",
                    "image": "assets/movies-app/m-movie-details-1.png"
                },
                {
                    "subtitle": "Wikipedia API",
                    "text": "Once we have seen an organized API, Wikipedia give me some good hours to study, this API is very complex. Before this API I was looking for a more specific API for movie nominations but I couldn't find a good one. So I decided to use Wikipedia because is like an open encyclopedia, and maybe it'll be useful for another future project. <br><br> When I look more deep into it, I saw that it has multiple queries and it hasn't have as good examples as I wanted, but well it's just a new tool to learn so I studied all its options and finally I could create the query I wanted, the one that returns movie nominations. <br><br> But it's not as clean as I would like, because in order to get the exact table of a movie page I have to request two queries. One to seek the nominations section and the other to extract the html of that table, there is a way to do it in just one query but there it comes the second problem. </br></br>  I search for movie queries based in its title (tmdb title) because there isn't an id relation, so we only have the title and it works for most of the movies; but for those that don't, we have to create another query, you can see in the image the queries I had to create in order to have most of the movies nominations details. <br><br> <img src='assets/movies-app/queries-wikipedia.png'> <br><br>  I still think it's not a clean solution but it works, and since wikipedia is a free, open content online encyclopedia there will always be special cases.",
                    "image": ""
                },
                {
                    "subtitle": "Justwatch API",
                    "text": "Justwatch is the only site in which we found movies streaming data, I was looking a way to implement it in my site but there isn't an official way. I found this <a target='_blank' href='https://github.com/lufinkey/node-justwatch-api'>resource</a> an it's a basic API it doesn't offer too much info about the queries but it informs a way to use it. <br><br> Once studied I was looking a way to implement it by TMDb ids, but there isn't a specific query for this, even though it has an 'TMDb id' attribute, I was testing to do it but unfortunatly it couldn't be possible because of the limited queries, instead I went for the search funtion by title and it matches quiet fine in every search. So this method works, there is a problem when it does'ot find the movie and thats why I double check the response with the initial title to be sure about the result. <br><br> Although this only works in a local enviroment an it's not available for production do to its CORS policy",
                    "image": ""
                }
            ],
            "conclusion": "This is a useful app, I really enjoyed doing it. It was a great experience dealing different APIs. And I use it every time I don't know what to watch and to find interesting movies, and not just for the popular ones."
        }
    },
    {
        "subheadline": "Frontend & Backend Project",
        "headline": "Managament Web",
        "description": "It's an administration website in which you can see all employees data and what projects they are in.",
        "image": "assets/images/managementWeb.png",
        "technologies": [
            "Angular",
            "Bootstrap",
            "Firebase",
            "GraphQL",
            "NodeJS",
            "Mongo",
            "Docker"
        ],
        "github": "http:dasd",
        "website": "http:web",
        "details": {
            "title": "An Admin System",
            "summary": "This was one of my first webs with Angular, I build it while I was learning the tools. So it had many stages, a basic one without many componenents and a few services, an intermidiate with a better design and state management with NgRx. And finally with backend implemented. So this app grew up at the same time with my skills. Thanks to this app I get to know how a complex website is build and the paths one should follow in order to make it scalable an avoid problems.",
            "images": [
                "assets/management-app/home.png",
                "assets/management-app/employees-list.png",
                "assets/management-app/assignments.png",
                "assets/management-app/auth-passed.png",
                "assets/management-app/remove-employee.png"
            ],
            "cards": [
                {
                    "subtitle": "The Idea",
                    "text": "The idea came in one of my interns, my mentor had this idea for Human Resources so he give the task. I was learning the concepts of angular and this was a way to implement the concepts learned. That is way it had many stages, I had to rebuild many parts of the page as I wanted more functionality. There were frecuent reviews that helped me go in the right way.",
                    "image": "assets/images/moviesPwa.png"
                },
                {
                    "subtitle": "Using NgRx",
                    "text": "At the beginning I was just using services, a dataService was the one that had all the methods I required, but then I was watching tutorials about NgRx and the team was also using this technology. So I remove the dataService a created a store for NgRx it was very complex at the beginning but once learned I could apreciate its advantages, it really helps to have a clean functionality in the web, avoiding refresh events and unnecessary requests. State management is a great practice to manage data in an efficient way.",
                    "image": "assets/images/moviesPwa.png"
                },
                {
                    "subtitle": "Firebase",
                    "text": "I used firebase for authentication in order to get admin operations. At the beginning I used this platform for my backend to save the data and the status of the employees. It's nice tool to have and the steps of deploying an web in this site are very simple. I'll look deeper for other projects, but for this web it was just for the sign in form",
                    "image": "assets/images/moviesPwa.png"
                },
                {
                    "subtitle": "GraphQL",
                    "text": "Once finished the frontend I wanted to start learning the backend, and then my mentor recommend me to learn GraphQL because it is a modern technology and when I started learning it I saw why it was necessary. Most of the time REST APIs build queries and in the frontend, when we use it we get some unnecessary data that we can't avoid, so with the response we select the attributes and create some filters. With GraphQL this is easier because its queries are customizable and we get the data we really need preventing unnecessary code in the frontend.",
                    "image": "assets/images/moviesPwa.png"
                },
                {
                    "subtitle": "Apollo & NgRx",
                    "text": "Once the backend was finished with GraphQL and Mongo. There was Apollo to integrate Frontend and Backend with GraphQL. But then it came this doubt about using NgRx. With the backend implemented we just can use custom queries in the places we needed and NgRx might not be useful this time. But there is a part in the Web in which we need a filter employees for a search event and doing this with queries isn't quiet clean in my opinion, there is a little flash everytime with emit that event. So I went for the complex way, and I research a lot to find a way to join Apollo and NgRx, there wasn't good enogh documentation or examples until I found a code in stackblitz that implements it. The solution is linking ApolloClient cache with NgRx cache, with this finally we can see the data again with NgRx and customize the web with our needs. Now with these useful tools. And there isn't flashing problems with the search functionality. Now it's very fast and smooth.",
                    "image": "assets/images/moviesPwa.png"
                }
            ],
            "conclusion": "Since this is one of my first projects, I learned too much doing it and I am proud of it. With this project I figure out that Angular is a very complex framework; when you want to create a new funtionality, a new page or other thing, it takes some steps to make it, but it's because it forces you to follow good paterns and create an scalable project. I am still watching to this project as a test view to implement new things seen how difficult could be to implement new things for the purpose of growing and to have a guide for future projects."
        }
    },
    {
        "subheadline": "Frontend Project",
        "headline": "Turism Web",
        "description": "This is a page for testing design skills, with a custom SCSS theme. With ngx-translate to suport languages. Created for a city of Bolivia.",
        "image": "assets/images/turismWeb.png",
        "technologies": [
            "Angular",
            "SCSS",
            "ngx-translate"
        ],
        "github": "http:dasd",
        "website": "http:web",
        "details": {
            "title": "An Informative page for Tarija",
            "summary": "Once I learned Angular with previous projects I decided to create this page because of an idea in the past. So I create in this with purpose of creating an informative page with real data and maybe use it in the future. Tarija is one of the more beautiful cities in Bolivia, it's a very silent city, its food and people are great. They have many interesting customs that I wanted to share.",
            "images": [
                "assets/turism-web/home.png",
                "assets/turism-web/places.png",
                "assets/turism-web/discover.png",
                "assets/turism-web/explore.png"
            ],
            "cards": [
                {
                    "subtitle": "The Design and Data",
                    "text": "As an informative page it took me some hours to find really good information to share, here in Bolivia we don't have many pages like this, there are only articles from reports and news. For the design I watch many websites until I found something simple we good looking. Then I decided to create this page with 4 sections (welcome, places, events, map) like most websites.",
                    "image": "assets/turism-web/modal.png"
                },
                {
                    "subtitle": "Google Maps",
                    "text": "Recently google maps API changed its politics and now you the requests are limited and you have to register your credit card. Of course the requests limited it's enough for this web but then I decided to go for an easier way which involves iframes tags that most sites uses in these cases and I use it with an ngSwitch. I think this isn't a cleaner way for this but for now it is just OK. I think there are web that really needs more functionality with maps, but this was not the case.",
                    "image": "assets/turism-web/map.png"
                }
            ],
            "conclusion": "Sincerely I am not quiet satisfied with this web, the design is nice but not the best. Since the design practice was the main purpose of this web I believe I just an step in the path of creating good looking websites."
        }
    },
    {
        "subheadline": "Frontend Project",
        "headline": "News PWA",
        "description": "An informative page where you find news from other countries",
        "image": "assets/images/newsPwa.png",
        "technologies": [
            "Ionic",
            "News API"
        ],
        "github": "http:dasd",
        "website": "http:web",
        "details": {
            "title": "An Informative page for Tarija",
            "summary": "This is my first page testing with API, I create this app from a tutorial learning Ionic and upgrated with some functionality I wanted to have. ",
            "images": [
                "assets/ecommerce-web/home.png",
                "assets/ecommerce-web/sections.png",
                "assets/ecommerce-web/categories.png",
                "assets/ecommerce-web/regiter.png",
                "assets/ecommerce-web/project-details.png",
                "assets/ecommerce-web/cart.png"
            ],
            "cards": [
                {
                    "subtitle": "The Design and Data",
                    "text": "As an informative page it took me some hours to find really good information to share, here in Bolivia we don't have many pages like this, there are only articles from reports and news. For the design I watch many websites until I found something simple we good looking. Then I decided to create this page with 4 sections (welcome, places, events, map) like most websites.",
                    "image": "assets/images/moviesPwa.png"
                },
                {
                    "subtitle": "Google Maps",
                    "text": "Recently google maps API changed its politics and now requests are limited and you have to register your credit card. Of course the requests limited it's enough for this web but then I decided to go for an easier way which involves iframes tags that most sites uses in these cases and I use it with an ngSwitch. I think this isn't a cleaner way for this but for now it is just OK. I think there are web that really needs more functionality with maps, but this was not the case.",
                    "image": "assets/images/moviesPwa.png"
                }
            ],
            "conclusion": "Sincerely I am not quiet satisfied with this web, the design is nice but not the best. Since the design practice was the main purpose of this web I believe I just an step in the path of creating good looking websites."
        }
    },
    {
        "subheadline": "Backend Project",
        "headline": "E-commerce Web",
        "description": "Basic e-commerce page with few products and a cart funtionality",
        "image": "assets/images/ecommerceWeb.png",
        "technologies": [
            "Laravel",
            "Bootstrap",
            "MySQL"
        ],
        "github": "http:dasd",
        "website": "http:web",
        "details": {
            "title": "Learning a new Framework",
            "summary": "Laravel is one of the most popular frameworks of php. I wanted to test how hard is to learn a new framework once I learned Angular. Coming from Javascript, PHP is a very different language so there was a lot to learn.",
            "images": [
                "assets/ecommerce-web/categories.png",
                "assets/ecommerce-web/sections.png",
                "assets/ecommerce-web/register.png",
                "assets/ecommerce-web/product-details.png"
            ],
            "cards": [
                {
                    "subtitle": "In the frontend",
                    "text": "I didn't want to complain very much in the frontend, since php is a backend language. I used Bootstrap and a nice tool from Laravel called blade templates, in which you can create components, layouts and pages. So it has the basic funtionality and there is an easy way to implement Vue which is a JS framework.",
                    "image": "assets/ecommerce-web/home.png"
                },
                {
                    "subtitle": "Laravel",
                    "text": "Laravel is an MVC framework, it has folders for views, routes, controlers and so on. The main advantage is that you have direct control to your database by mysql queries, you can have the frontend work directly without an API for an easy way Laravel has a custom style code to interact.",
                    "image": "assets/ecommerce-web/categories.png"
                },
                {
                    "subtitle": "In the Backend",
                    "text": "With Laravel you have custom commands to create database, tables, queries files. Or create an squema file and then migrate it. Since this framework is based for backend you have other commands like authentication in order to create a fast functional start. For this project I create a basic Cart system for buyers with an auth required.",
                    "image": "assets/ecommerce-web/cart.png"
                }
            ],
            "conclusion": "I didn't dive deeper in this framework, this was a test to see how difficult would be to learn a new framework from scratch. And it's good too see that there are common aspects between frameworks and both face the same problems and have their own solution."
        }
    }
]